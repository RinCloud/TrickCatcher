import math

def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[2] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero finds x such that poly(x) = 0.
    find_zero returns only one zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non-zero coefficient as it guarantees
    a solution.
    """

    # Check if the number of coefficients is even
    if len(xs) % 2 != 0:
        return None

    # Find the largest non-zero coefficient
    largest_non_zero = max([abs(coeff) for coeff in xs])
    
    # Find the index of the largest non-zero coefficient
    largest_non_zero_index = xs.index(largest_non_zero)

    # Divide the list of coefficients into two parts: before and including the largest non-zero coefficient, and after the largest non-zero coefficient
    first_half = xs[:largest_non_zero_index+1]
    second_half = xs[largest_non_zero_index+1:]

    # Find the solution using the first half of the coefficients
    x_solution = -1 * sum(first_half) / largest_non_zero
    
    return x_solution