import math

def poly(xs: list, x: float):
    """
    Evaluates polynomial with coefficients xs at point x.
    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n
    """
    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])

def find_zero(xs: list):
    """ xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    """
    
    assert len(xs) % 2 == 0, 'The list xs must have an even number of coefficients'
    
    max_coefficient = max(xs)
    degree = xs.index(max_coefficient)
    
    if degree == 0:
        return 0
    
    all_possible_factors = []
    for i in range(1, int(abs(max_coefficient)) + 1):
        if max_coefficient % i == 0:
            all_possible_factors.append(i)
            all_possible_factors.append(-i)
    
    for zero_point in all_possible_factors:
        if poly(xs, zero_point) == 0:
            return zero_point