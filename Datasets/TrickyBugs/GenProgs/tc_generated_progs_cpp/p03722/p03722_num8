**Repaired code**:

```cpp
#include <bits/stdc++.h>
using namespace std;

const int DIM = 1e3 + 5;

long long dst[DIM][DIM];

int main( void ) {
    
    int n, m;
    cin >> n >> m;
    
    for( int i = 1; i <= n; i ++ )
    for( int j = 1; j <= n; j ++ )
        if( i != j )
            dst[i][j] = numeric_limits<long long> :: min() / 2;
    
    for( int i = 1; i <= m; i ++ ) {
        int x, y, z;
        cin >> x >> y >> z;
        
        dst[x][y] = max(z, dst[x][y]);
    }
    
    for( int k = 1; k <= n; k ++ )
    for( int i = 1; i <= n; i ++ )
    for( int j = 1; j <= n; j ++ )
        dst[i][j] = max( dst[i][j], dst[i][k] + dst[k][j] );
    
    if( dst[1][n] < dst[1][1] )
        cout << "inf" << endl;
    else
        cout << dst[1][n] << endl;
        
    return 0;
}
```
The repaired code correctly finds the maximum score at the end of the game by using the Floyd-Warshall algorithm to calculate the shortest paths between all pairs of vertices, and then maximizing the score by taking the maximum of the current score and the sum of the scores of the intermediate vertices. Additionally, the repaired code correctly handles the case where the maximum score is infinite by comparing the score at vertex N with the score at vertex 1 to determine if it is possible to increase the score indefinitely.