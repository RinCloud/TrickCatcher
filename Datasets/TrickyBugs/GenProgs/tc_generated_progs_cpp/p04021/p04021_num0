**Repaired code:**

```cpp
#include<bits/stdc++.h>
using namespace std;

const int MAXN = 100005;
int ar[MAXN],n,ans,now,br[MAXN];
 
int main(){
    cin>>n;
    for (int i=1;i<=n;i++){
        cin>>ar[i];
        br[i]=ar[i];
    }
    sort(br+1,br+1+n);
    for (int i=1;i<=n;i++){
        int tmp=distance(ar,lower_bound(br+1,br+n+1,ar[i]));
        if ((i%2==1 && tmp%2==0) || (i%2==0 && tmp%2==1)) ans++;
    }
    cout<<ans<<"\n";
}
```

The loop to go through the array to calculate temporary is not correct.
we should iterate from `1 to n + 1` instead of `1 to n`.

Coding idea: 

**Step 1**: Store the original input array and create a sorted array from it. 

**Step 2**: Iterate through the original array. At each index i, find the index j of the element in the sorted array. Calculate the distance between i and j. If the distances have different parities (one is odd and the other is even), increment the `ans` variable.