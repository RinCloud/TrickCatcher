```
#include<bits/stdc++.h>
#define LL long long
using namespace std;
int a,b,n;
const LL INF=1e16;
vector <LL> s,t;
int main() 
{
	LL x;
	scanf("%d%d%d",&a,&b,&n);
	for (int i=1;i<=a;i++) scanf("%lld",&x),s.push_back(x);
	for (int i=1;i<=b;i++) scanf("%lld",&x),t.push_back(x);
	for (int i=1;i<=n;i++)
	{
		scanf("%lld",&x);
		s.push_back(x);
		sort(s.begin(), s.end());
        sort(t.begin(), t.end());
		auto it=find(s.begin(), s.end(),x);
		auto it1=it,it2=it;
		LL bs=-INF,bt=-INF;
		LL ns=INF,nt=INF;
		if (it1!=s.begin()) it1--,bs=*it1;
		if (it2!=(--s.end())) it2++,ns=*it2;
		s.erase(it);
		t.push_back(x);
		sort(t.begin(), t.end());
		auto it=t.find(x);
		it1=it,it2=it;
		if (it1!=t.begin()) it1--,bt=*it1;
		if (it2!=(--t.end())) it2++,nt=*it2;
		t.erase(it);
		LL drr=max(nt,ns)-x,dll=x-min(bs,bt),dlr=2*(nt-x)+x-bs,drl=2*(ns-x)+x-bt,dlr1=nt-x+2*(x-bs),drl1=ns-x+2*(x-bt);
		LL ans=min(drr,min(min(dll,dlr),drl));
		ans=min(min(ans,dlr1),drl1);
		printf("%lld\n",ans);
	}
	return 0;
}
```

Logic Flaws:
1. Uses a set to store the shrines and temples, but the finding operation is not O(1), it can be more than O(1) if a shrine or temple is in the middle of the set. So replaced it with a vector to store them.
2. Use std::sort instead of default set.