```
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
#define MAXN 100000000
int x,y,h,w,n;
long long ans[10],base=int(1e9)+7, zero, node[MAXN], tot;
int main() {
    scanf("%d%d%d", &h, &w, &n);
    zero=1ll*(h-2)*(w-2);
    while (n--) {
        scanf("%d%d", &x, &y);
        for(int i=0;i<3;i++) 
			for(int j=0;j<3;j++)
                if (1<=x-i&&x-i<=h-2&&1<=y-j&&y-j<=w-2)
                    node[tot++]=MAXN*(x-i)+(y-j);
    }
    sort(node, node+tot);
    for (int i = 0, cnt = 1; i<tot; i++) {
        if(node[i]==node[i+1]) 
			cnt++;
        else 
			ans[cnt]++, cnt=1, zero--;
    }
    printf("%lld\n",zero);
    for (int i=0;i<10;i++)
		printf("%lld\n", ans[i]);
    return 0;
}
```
Solution:
```
#include <cstdio>
#include <cstring>
#include <algorithm>
using namespace std;
#define MAXN 100000000
long long ans[10], base=int(1e9)+7, zero, node[MAXN], tot;
int main() {
    int x, y, h, w, n;
    scanf("%d%d%d", &h, &w, &n);
    zero = 1ll * (h-2) * (w-2);
    while (n--) {
        scanf("%d%d", &x, &y);
        for (int i=0; i<3; i++) {
            for (int j=0; j<3; j++) {
                if (1<=x-i && x-i<=h-2 && 1<=y-j && y-j<=w-2) {
                    node[tot++] = MAXN * (x-i) + (y-j);
                }
            }
        }
    }
    sort(node, node+tot);
    for (int i=0, cnt=1; i<tot; i++) {
        if (node[i] == node[i+1]) {
            cnt++;
        } else {
            ans[cnt]++, cnt=1, zero--;
        }
    }
    printf("%lld\n", zero);
    for (int i=0; i<10; i++) {
        printf("%lld\n", ans[i]);
    }
    return 0;
}
```