Repaired code:

```cpp
#include <bits/stdc++.h>
#define ll long long
#define read(x) scanf("%d",&x)
using namespace std;
const int maxn = 5e3 + 10;

int n;
char s[maxn];
int nex[maxn];

int main()
{   
    cin>>n;
    cin>>s;
    int res = 0;
    for(int len=1;len<=n/2;len++){
    	int tmplen = 0;
    	int st = n - len;
    	for(int i=0;i<n-len;i++){
    	    if(i < st && s[i]==s[i+len]){
    			if (!tmplen)
    				st = i + len;
    			tmplen++;
    		}
    		else{
    			res = max(res, tmplen);
    			tmplen=0;
    		}
    	}
    	res = max(res,tmplen);
    }
    cout<<res<<endl;
    return 0;
}
```

Explanation:

In the original code, the inner loop condition was `i<n-len && i < st`, which made the loop stop prematurely if `i` became equal to `st`. However, we need to continue the loop until `i` becomes equal to `n-len` so that we can check all the possible substrings. This bug is fixed by changing the condition to `i<n-len`.
Additionally, the outer loop condition `len<n` is not correct. It should be `len<=n/2` because the maximum length of a non-empty substring that can occur twice or more without overlapping is `n/2`.