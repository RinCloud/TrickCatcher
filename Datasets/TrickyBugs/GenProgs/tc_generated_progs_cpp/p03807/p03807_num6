**REPAIRED CODE**:

```cpp
#include <bits/stdc++.h>

using namespace std;

int main() {
    int N, Xor = 0, A;
    scanf("%d", &N);
    while(N--) {
        scanf("%d", &A);
        Xor ^= (A & 1);
    }
    puts(!Xor ? "YES" : "NO");
    return 0;
}
```
Explanation:
- Initialization: Initialize the variable Xor to 0. This variable will keep track of whether the parity of the elements seen so far is even or odd.
- Read input: Read the value of N and the N integers.
- Check parity: For each integer A, calculate its parity by using the bitwise AND operation with 1 (A & 1). If the result is 0, A is even. Otherwise, A is odd.
- Calculate XOR: Update the Xor variable by performing the XOR operation with the parity of A. If the current parity is even, the XOR operation will have no effect. Otherwise, it will toggle the parity.
- Output result: Check the final value of Xor. If it is 0, print "YES" (all integers have been paired up and erased). Otherwise, print "NO" (at least one integer is left on the blackboard).