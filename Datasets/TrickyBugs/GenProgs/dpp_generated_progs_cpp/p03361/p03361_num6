// Here is the cpp program to solve the problem based on the given program intention.

#include <iostream>
#include <vector>
#include <queue>
using namespace std;

int main() {
    int H, W;
    cin >> H >> W;
    vector<vector<char>> s(H, vector<char>(W));
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            cin >> s[i][j];
        }
    }
    
    vector<vector<bool>> visited(H, vector<bool>(W, false));
    queue<pair<int, int>> q;
    int dx[] = {-1, 0, 1, 0};
    int dy[] = {0, 1, 0, -1};
    bool possible = true;
    
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            if (!visited[i][j] && s[i][j] == '#') {
                bool found = false;
                q.push({i, j});
                visited[i][j] = true;
                
                while (!q.empty()) {
                    int x = q.front().first;
                    int y = q.front().second;
                    q.pop();
                    
                    if (s[x][y] == '.') {
                        found = true;
                        break;
                    }
                    
                    for (int k = 0; k < 4; k++) {
                        int nx = x + dx[k];
                        int ny = y + dy[k];
                        
                        if (nx >= 0 && nx < H && ny >= 0 && ny < W && !visited[nx][ny] && s[nx][ny] == '#') {
                            q.push({nx, ny});
                            visited[nx][ny] = true;
                        }
                    }
                }
                
                if (!found) {
                    possible = false;
                    break;
                }
            }
        }
        
        if (!possible) {
            break;
        }
    }
    
    if (possible) {
        cout << "Yes" << endl;
    } else {
        cout << "No" << endl;
    }
    
    return 0;
}