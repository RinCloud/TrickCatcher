// C++ program to find if a good string exists and to find the lexicographically smallest such string

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Function to check if a good string exists
bool isGoodString(vector<int>& perm, string& s) {
    int n = perm.size();
    vector<int> x, y;
    int highX = 0, highY = 0;
    
    for (int i = 0; i < n; i++) {
        if (s[i] == '0') {
            x.push_back(perm[i]);
            highX = max(highX, perm[i]);
        } else {
            y.push_back(perm[i]);
            highY = max(highY, perm[i]);
        }
        
        if (highX == highY) {
            return true;
        }
    }
    
    return false;
}

// Function to convert good string to lexicographically smallest string
string convertGoodString(vector<int>& perm) {
    int n = perm.size();
    string s(n, '0');
    vector<int> x, y;
    int highX = 0, highY = 0;
    
    for (int i = 0; i < n; i++) {
        if (!x.empty() && perm[i] > highX) {
            s[i] = '1';
            y.push_back(perm[i]);
            highY = max(highY, perm[i]);
        } else {
            x.push_back(perm[i]);
            highX = max(highX, perm[i]);
        }
    }
    
    return s;
}

int main() {
    int n;
    cin >> n;
    
    vector<int> perm(n);
    for (int i = 0; i < n; i++) {
        cin >> perm[i];
    }
    
    string s(n, '0');
    if (isGoodString(perm, s)) {
        cout << convertGoodString(perm) << endl;
    } else {
        cout << -1 << endl;
    }
    
    return 0;
}