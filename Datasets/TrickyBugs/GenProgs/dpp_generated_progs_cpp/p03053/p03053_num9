```cpp
#include<iostream>
#include<vector>
#include<queue>
using namespace std;

int bfs(vector<vector<char>>& grid, int H, int W) {
    vector<pair<int, int>> directions = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
    
    int operations = 0;
    
    queue<pair<int, int>> blackSquares;
    
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            if (grid[i][j] == '#') {
                blackSquares.push({i, j});
            }
        }
    }
    
    while (!blackSquares.empty()) {
        int size = blackSquares.size();
        
        for (int i = 0; i < size; i++) {
            pair<int, int> square = blackSquares.front();
            blackSquares.pop();
            
            for (pair<int, int> direction : directions) {
                int newX = square.first + direction.first;
                int newY = square.second + direction.second;
                
                if (newX >= 0 && newX < H && newY >= 0 && newY < W && grid[newX][newY] == '.') {
                    grid[newX][newY] = '#';
                    blackSquares.push({newX, newY});
                }
            }
        }
        
        if (!blackSquares.empty()) {
            operations++;
        }
    }
    
    return operations;
}

int main() {
    int H, W;
    cin >> H >> W;
    
    vector<vector<char>> grid(H, vector<char>(W));
    
    for (int i = 0; i < H; i++) {
        for (int j = 0; j < W; j++) {
            cin >> grid[i][j];
        }
    }
    
    cout << bfs(grid, H, W) << endl;
    
    return 0;
}
```