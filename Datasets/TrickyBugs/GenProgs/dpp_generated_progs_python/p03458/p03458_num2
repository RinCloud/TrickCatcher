```
def max_satisfy_desires(N, K, desires):
    black_count = [0] * (2 * K)
    white_count = [0] * (2 * K)
    
    for x, y, c in desires:
        if (x // K) % 2 == 0:
            if (y // K) % 2 == 0:
                if c == 'B':
                    black_count[0] += 1
                else:
                    white_count[0] += 1
            else:
                if c == 'B':
                    white_count[0] += 1
                else:
                    black_count[0] += 1
        else:
            if (y // K) % 2 == 0:
                if c == 'B':
                    white_count[0] += 1
                else:
                    black_count[0] += 1
            else:
                if c == 'B':
                    black_count[0] += 1
                else:
                    white_count[0] += 1
    
    for i in range(1, K):
        black_count[i] = black_count[i-1]
        white_count[i] = white_count[i-1]
        black_count[i] += black_count[i-1 + K] - black_count[i-1]
        white_count[i] += white_count[i-1 + K] - white_count[i-1]
    
    for i in range(K, 2*K):
        black_count[i] = black_count[i-1]
        white_count[i] = white_count[i-1]
        black_count[i] += black_count[i-1 + K] - black_count[i-1]
        white_count[i] += white_count[i-1 + K] - white_count[i-1]
    
    max_satisfy = 0
    
    for i in range(K):
        max_satisfy = max(max_satisfy, black_count[i] + white_count[K-1] - white_count[i])
        max_satisfy = max(max_satisfy, white_count[i] + black_count[K-1] - black_count[i])
    
    return max_satisfy

N, K = map(int, input().split())
desires = []

for _ in range(N):
    x, y, c = input().split()
    x = int(x)
    y = int(y)
    desires.append((x, y, c))
    
result = max_satisfy_desires(N, K, desires)
print(result)
```