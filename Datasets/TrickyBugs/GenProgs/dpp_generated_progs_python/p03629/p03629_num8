# Approach:
To find the lexicographically smallest string among the shortest strings that are not subsequences of A, we can consider all possible strings starting from 'a' and incrementally check if they are subsequences of A. The first string that is not a subsequence of A will be our answer.

# Algorithm:
1. Read the input string A.
2. Initialize a variable 'ans' to 'a'.
3. While True:
    - If 'ans' is not a subsequence of A, break the loop.
    - Otherwise, increment 'ans' by 1.
4. Print the value of 'ans'.

# Python program:
```python
def is_subsequence(s1, s2):
    n1 = len(s1)
    n2 = len(s2)
    i = 0
    j = 0
    while i < n1 and j < n2:
        if s1[i] == s2[j]:
            i += 1
        j += 1
    return i == n1

def find_smallest_string(A):
    ans = 'a'
    while True:
        if not is_subsequence(ans, A):
            break
        ans = chr(ord(ans) + 1)
    return ans

# Read input
A = input()

# Find the smallest string
result = find_smallest_string(A)

# Print the result
print(result)
```
Note: This program defines a helper function `is_subsequence` to check if a given string is a subsequence of another string. The main function `find_smallest_string` uses this helper function to find the lexicographically smallest string that is not a subsequence of A.