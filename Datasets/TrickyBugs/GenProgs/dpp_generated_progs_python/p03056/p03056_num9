```python
def complexity_of_grid(H, W, grid):
    def count_black_squares(grid):
        count = 0
        for row in grid:
            count += row.count('#')
        return count
    
    def is_same_color(grid):
        for row in grid:
            if '#' in row and '.' in row:
                return False
        return True
    
    def divide_grid(grid):
        subgrids = []
        H = len(grid)
        W = len(grid[0])
        
        # Divide the grid horizontally
        for i in range(1, H):
            subgrid1 = grid[:i]
            subgrid2 = grid[i:]
            subgrids.append((subgrid1, subgrid2))
        
        # Divide the grid vertically
        for i in range(1, W):
            subgrid1 = [row[:i] for row in grid]
            subgrid2 = [row[i:] for row in grid]
            subgrids.append((subgrid1, subgrid2))
        
        return subgrids
    
    def complexity(grid):
        if is_same_color(grid):
            return 0
        
        subgrids = divide_grid(grid)
        complexities = []
        for subgrid1, subgrid2 in subgrids:
            c1 = complexity(subgrid1)
            c2 = complexity(subgrid2)
            complexities.append(max(c1, c2))
        
        return min(complexities) + 1
    
    grid = [list(row) for row in grid]
    return complexity(grid)
    

# Read input
H, W = map(int, input().split())
grid = [input().strip() for _ in range(H)]

# Compute and print complexity of the grid
print(complexity_of_grid(H, W, grid))
```