#058-C

```python
n=int(input())
s=[]
for i in range(n):
    s.append(list(input()))
l=''
for i in range(26):
    t=n+2
    for j in range(n):
        t=min(t,s[j].count(chr(97+i)))
    for j in range(t):
        l=l+chr(97+i)
print(l)
```

I have found a bug in this code. The bug is in the last two lines of the code. The `l=l+chr(97+i)` statement is inside a loop, so each time it is executed, it appends the current character to the end of the string `l`. However, this is not the correct way to construct the resulting string. Instead of appending characters one by one, we need to construct the string using the `t` value, which represents the number of times the current character needs to be included in the resulting string.

To fix this bug, we need to modify the last two lines of the code as follows:

```python
for i in range(26):
    t=n+2
    for j in range(n):
        t=min(t,s[j].count(chr(97+i)))
    l=l+chr(97+i)*t
print(l)
```

This way, the `chr(97+i)*t` expression constructs a string consisting of `t` repetitions of the current character, and the resulting string is appended to `l` all at once instead of appending one character at a time.