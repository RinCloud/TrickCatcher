```python
def is_good_number(n):
    return n % 1111 == 0 or (n % 1000) // 111 == 1 or (n % 100) // 11 == 1 or (n % 10) == 1


n = int(input())
if is_good_number(n):
    print("Yes")
else:
    print("No")
```

Explanation:
1. Define a function `is_good_number` that takes an integer `n` and returns a boolean value indicating whether `n` is a good number.
2. A good number is defined as a 4-digit integer with three or more consecutive same digits.
3. Use modulo arithmetic to check for the conditions of a good number:
   - If `n` is divisible by 1111 (i.e., n % 1111 == 0) -> 4 consecutive same digits, return `True`.
   - If `n` is not divisible by 1111 but the last three digits of `n` are the same (i.e., (n % 1000) // 111 == 1) -> 3 consecutive same digits, return `True`.
   - If `n` is not divisible by 1111 and the last two digits of `n` are the same (i.e., (n % 100) // 11 == 1) -> 2 consecutive same digits, return `True`.
   - If none of the conditions are met, return `False`.
4. Convert the input to an integer `n`.
5. Check if `n` is a good number using the `is_good_number` function.
6. If `n` is a good number, print "Yes"; otherwise, print "No".