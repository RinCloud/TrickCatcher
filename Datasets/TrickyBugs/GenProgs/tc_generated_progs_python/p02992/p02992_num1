PROBLEM DESCRIPTION**:
Find the number of sequences of length K consisting of positive integers such that the product of any two adjacent elements is at most N, modulo 10^9+7.
CONSTRAINTS:
* 1 <= N <= 10^9
* ~~1~~ 2 <= K <= 100
* N and K are integers.

INPUT:
Input is given from Standard Input in the following format:
N K

OUTPUT:
Print the number of sequences, modulo 10^9+7.

EXAMPLES:

Given the input:
3 2

The code should output:
5

Given the input:
10 3

The code should output:
147

Given the input:
314159265 35

The code should output:
457397712

**CODE**:
```python
def main():
    MOD=10**9+7
    n,k=map(int,input().split())
    t=[] # ｔ = n//j の種類を数えるのに使う
    t_cnt=[] # t となる j の個数
    cnt=[0]
    for i in range(1,int(n**0.5)+1):
        tmp=n//i
        if tmp not in t:
            t.append(tmp)
            t_cnt.append(1)
        else:
            cnt[-1]+=tmp
            t_cnt[-1]+=1
    for tmp in range(t[-1]-1,0,-1):
        tmp_j=n//(tmp)-n//(tmp+1)
        if tmp_j!=0:
            t.append(tmp)
            t_cnt.append(tmp_j)

    cnt=[]
    now=0
    for i in range(len(t)):
        now+=t[i]*t_cnt[i]
        cnt.append(now)
    kind=len(cnt)
    dp=[cnt]+[[0]*kind for i in range(k-2)]

    for i in range(1,k-1):
        for j in range(kind):
            dp[i][j]=(dp[i-1][kind-j-1]*t_cnt[j]+dp[i][j-1])%MOD
    print(dp[-1][-1])
    return

if __name__ == '__main__':
    main()
```